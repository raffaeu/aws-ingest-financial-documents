{
 "Parameters": {
  "bucketName": {
   "Type": "String",
   "Default": "ml-documents-bucket",
   "Description": "The name of S3 Bucket"
  },
  "sqsName": {
   "Type": "String",
   "Default": "ml-documents-queue",
   "Description": "The name of SQS Queue"
  },
  "snsName": {
   "Type": "String",
   "Default": "ml-documents-topic",
   "Description": "The name of SNS Topic"
  },
  "textractLambdaName": {
   "Type": "String",
   "Default": "ml-documents-fx-analyse",
   "Description": "The name of Lambda triggering Textract Analysis"
  },
  "comprehendLambdaName": {
   "Type": "String",
   "Default": "ml-documents-fx-classify",
   "Description": "The name of Lambda triggering Comprehend Analysis"
  },
  "dynamoTableName": {
   "Type": "String",
   "Default": "ml-documents-table",
   "Description": "The name of the DynamoDB Table"
  },
  "projectName": {
   "Type": "String",
   "Default": "ml-project",
   "Description": "The name of the Tag used to group all the resources"
  }
 },
 "Resources": {
  "bucket43879C71": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": {
     "Ref": "bucketName"
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "project",
      "Value": {
       "Ref": "projectName"
      }
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkStack/bucket/Resource"
   }
  },
  "bucketPolicy638F945D": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "bucket43879C71"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "bucket43879C71",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "bucket43879C71",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/bucket/Policy/Resource"
   }
  },
  "bucketAutoDeleteObjectsCustomResource3F4990B2": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "bucket43879C71"
    }
   },
   "DependsOn": [
    "bucketPolicy638F945D"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkStack/bucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "bucketNotifications2CB09E7A": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "bucket43879C71"
    },
    "NotificationConfiguration": {
     "QueueConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:Put"
       ],
       "QueueArn": {
        "Fn::GetAtt": [
         "queue276F7297",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "queuePolicy89DB7105",
    "queue276F7297"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/bucket/Notifications/Resource"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "3f51abb709b8e65167a45aeed02bab11540603d909005d7148230ba5ce6c74d7.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs14.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "bucket43879C71"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.3f51abb709b8e65167a45aeed02bab11540603d909005d7148230ba5ce6c74d7",
    "aws:asset:property": "Code"
   }
  },
  "deadQueue4F60317B": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 7200,
    "QueueName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "sqsName"
       },
       "-dlq"
      ]
     ]
    },
    "Tags": [
     {
      "Key": "project",
      "Value": {
       "Ref": "projectName"
      }
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkStack/deadQueue/Resource"
   }
  },
  "queue276F7297": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "QueueName": {
     "Ref": "sqsName"
    },
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "deadQueue4F60317B",
       "Arn"
      ]
     },
     "maxReceiveCount": 5
    },
    "Tags": [
     {
      "Key": "project",
      "Value": {
       "Ref": "projectName"
      }
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkStack/queue/Resource"
   }
  },
  "queuePolicy89DB7105": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:SendMessage"
       ],
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "bucket43879C71",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "queue276F7297",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "queue276F7297"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/queue/Policy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "analyseTopic1EA104B0": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "DisplayName": "Complete Textract Analysis topic",
    "Tags": [
     {
      "Key": "project",
      "Value": {
       "Ref": "projectName"
      }
     }
    ],
    "TopicName": {
     "Ref": "snsName"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/analyseTopic/Resource"
   }
  },
  "textractanalyseroleFAADC898": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "textract.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": "sns:Publish",
         "Effect": "Allow",
         "Resource": "*"
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "GrantSNS"
     }
    ],
    "RoleName": "textract-analyserole",
    "Tags": [
     {
      "Key": "project",
      "Value": {
       "Ref": "projectName"
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/textract-analyserole/Resource"
   }
  },
  "analyseFunctionServiceRoleE3899657": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "project",
      "Value": {
       "Ref": "projectName"
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/analyseFunction/ServiceRole/Resource"
   }
  },
  "analyseFunctionServiceRoleDefaultPolicyEC93633C": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "queue276F7297",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "bucket43879C71",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "bucket43879C71",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "analyseFunctionServiceRoleDefaultPolicyEC93633C",
    "Roles": [
     {
      "Ref": "analyseFunctionServiceRoleE3899657"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/analyseFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "analyseFunction07BE0996": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "7e595723010c93553ed8c02c1171aeac6d176d8ee00f773016041687f74ac308.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "analyseFunctionServiceRoleE3899657",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "TOPIC_ARN": {
       "Ref": "analyseTopic1EA104B0"
      },
      "ROLE_ARN": {
       "Fn::GetAtt": [
        "textractanalyseroleFAADC898",
        "Arn"
       ]
      }
     }
    },
    "FunctionName": {
     "Ref": "textractLambdaName"
    },
    "Handler": "analyse.handler",
    "Runtime": "nodejs16.x",
    "Tags": [
     {
      "Key": "project",
      "Value": {
       "Ref": "projectName"
      }
     }
    ]
   },
   "DependsOn": [
    "analyseFunctionServiceRoleDefaultPolicyEC93633C",
    "analyseFunctionServiceRoleE3899657"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/analyseFunction/Resource",
    "aws:asset:path": "asset.7e595723010c93553ed8c02c1171aeac6d176d8ee00f773016041687f74ac308",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "analyseFunctionSqsEventSourceCdkStackqueueA0AE4E843C3FFEE0": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "FunctionName": {
     "Ref": "analyseFunction07BE0996"
    },
    "BatchSize": 10,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "queue276F7297",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/analyseFunction/SqsEventSource:CdkStackqueueA0AE4E84/Resource"
   }
  },
  "analyselambdapolicy27EEF900": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "comprehend:DetectDominantLanguage",
        "comprehend:DetectEntities",
        "textract:AnalyzeDocument",
        "textract:DetectDocumentText",
        "textract:GetDocumentTextDetection",
        "textract:StartDocumentTextAnalysis",
        "textract:StartDocumentTextDetection"
       ],
       "Effect": "Allow",
       "Resource": "*",
       "Sid": "iamtextractpolicy"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "analyselambdapolicy27EEF900",
    "Roles": [
     {
      "Ref": "analyseFunctionServiceRoleE3899657"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/analyselambdapolicy/Resource"
   }
  },
  "table8235A42E": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "KeySchema": [
     {
      "AttributeName": "id",
      "KeyType": "HASH"
     }
    ],
    "AttributeDefinitions": [
     {
      "AttributeName": "id",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "TableName": {
     "Ref": "dynamoTableName"
    },
    "Tags": [
     {
      "Key": "project",
      "Value": {
       "Ref": "projectName"
      }
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "CdkStack/table/Resource"
   }
  },
  "classifyFunctionServiceRoleAC67B7F1": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "project",
      "Value": {
       "Ref": "projectName"
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/classifyFunction/ServiceRole/Resource"
   }
  },
  "classifyFunctionServiceRoleDefaultPolicy13B873B0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "dynamodb:*",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "table8235A42E",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "classifyFunctionServiceRoleDefaultPolicy13B873B0",
    "Roles": [
     {
      "Ref": "classifyFunctionServiceRoleAC67B7F1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/classifyFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "classifyFunctionD688709B": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "7e595723010c93553ed8c02c1171aeac6d176d8ee00f773016041687f74ac308.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "classifyFunctionServiceRoleAC67B7F1",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "TABLE_NAME": {
       "Ref": "table8235A42E"
      }
     }
    },
    "FunctionName": {
     "Ref": "comprehendLambdaName"
    },
    "Handler": "classify.handler",
    "Runtime": "nodejs16.x",
    "Tags": [
     {
      "Key": "project",
      "Value": {
       "Ref": "projectName"
      }
     }
    ]
   },
   "DependsOn": [
    "classifyFunctionServiceRoleDefaultPolicy13B873B0",
    "classifyFunctionServiceRoleAC67B7F1"
   ],
   "Metadata": {
    "aws:cdk:path": "CdkStack/classifyFunction/Resource",
    "aws:asset:path": "asset.7e595723010c93553ed8c02c1171aeac6d176d8ee00f773016041687f74ac308",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "classifyFunctionAllowInvokeCdkStackanalyseTopic53418DBDCE6AEB16": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "classifyFunctionD688709B",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "analyseTopic1EA104B0"
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/classifyFunction/AllowInvoke:CdkStackanalyseTopic53418DBD"
   }
  },
  "classifyFunctionanalyseTopicF99950E5": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "analyseTopic1EA104B0"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "classifyFunctionD688709B",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/classifyFunction/analyseTopic/Resource"
   }
  },
  "classifylambdapolicy7EA03A23": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "comprehend:DetectDominantLanguage",
        "comprehend:DetectEntities",
        "textract:AnalyzeDocument",
        "textract:DetectDocumentText",
        "textract:GetDocumentTextDetection",
        "textract:StartDocumentTextAnalysis",
        "textract:StartDocumentTextDetection"
       ],
       "Effect": "Allow",
       "Resource": "*",
       "Sid": "iamtextractpolicy"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "classifylambdapolicy7EA03A23",
    "Roles": [
     {
      "Ref": "classifyFunctionServiceRoleAC67B7F1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/classifylambdapolicy/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21RS2/DIAz+Lb0TtqzqpB3XaLtNytreKwJe5SZAhqFTFeW/L0AfmbQL/l42Mjzx1YqXC/FDhVRt0WHDh60XsmXVl6mFExo8ODb5+4GWfFgH2YKP5gXlUtsO5fkuX3gma0EwMvomPnwGCBBjGaTz3jujI0Oh+bCxXYqneg9eM2SmmTvbo4xqBtvQkHTYe7QmqnM+sk7oRgk+vAcjr4kbfjuB8VsbnIQP0fdoDtH+X63BaSRKQ2m5F0Tgib/GwtTZCG3V9JQ70eQFEhhHVgXyVm+A0ry02g3/sWpnT6imp08jpy85xIvnjZU1CvNWxirgR3o4lc+8fOGPiyMhFi4Yjxr4Jtdfv2o8FusBAAA="
   },
   "Metadata": {
    "aws:cdk:path": "CdkStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 }
}